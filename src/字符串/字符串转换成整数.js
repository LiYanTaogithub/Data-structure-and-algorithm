/**
 * 
 * @param {*} str 
 * @returns 
 * 写一个函数 StrToInt，实现把字符串转换成整数这个功能。不能使用 atoi 或者其他类似的库函数。
首先，该函数会根据需要丢弃无用的开头空格字符，直到寻找到第一个非空格的字符为止。

当我们寻找到的第一个非空字符为正或者负号时，则将该符号与之后面尽可能多的连续数字组合起来，作为该整数的正负号；假如第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

该字符串除了有效的整数部分之后也可能会存在多余的字符，这些字符可以被忽略，它们对于函数不应该造成影响。

注意：假如该字符串中的第一个非空格字符不是一个有效整数字符、字符串为空或字符串仅包含空白字符时，则你的函数不需要进行转换。

在任何情况下，若函数不能进行有效的转换时，请返回 0。

说明：

假设我们的环境只能存储 32 位大小的有符号整数，那么其数值范围为 [−231,  231 − 1]。如果数值超过这个范围，请返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
 */

var strToInt = function(str) { 
    let res = 0;
    let i = 0;
    let isMinus = false; // 记录是否为负号
    // 判断首位，首位合格的无非就'+'或'-'或数字三种情况，其他的一概滚蛋
    while(str[i] === ' ') i++;
    if((str[i] <0 || str[i] > 9) && str[i] !== '-' && str[i] !== '+') return 0; // 开头不为数字或正负号就返回
    //'+''-'肯定是要把它去掉的，这样三种情况就统一了
    if(str[i] === '-'){
        isMinus = true;
        i++
    }else if(str[i] === '+') i++;
    //正式累加
    while(str[i] >= '0' && str[i] <= '9'){
        res += res * 10 + str[i];
        //及时止损，一看到res超int范围立马return
        if(res > Integer.MAX_VALUE) {
            return isMinus ? Integer.MIN_VALUE : Integer.MAX_VALUE;
        }
        i++; // 往后走一位
    }
    return isMinus ? -res : res;
};