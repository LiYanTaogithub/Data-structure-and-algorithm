/**
 * 给你一个有序数组 nums ，请你** 原地** 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
示例 1：


输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
示例 2：


输入：nums = [0,0,1,1,1,2,2,3,3,4]
输出：5, nums = [0,1,2,3,4]
解释：函数应该返回新的长度 5 ， 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4 。不需要考虑数组中超出新长度后面的元素。
 */

/**
 * 循环变量 slow 看到的数值 nums[slow] 永远和变量 fast 看到的数值 nums[fast] 进行比较。[0, fast] 表示区间里没有重复元素
 * 
 * <!-- 定义快慢两个指针，都从队列第2个元素开始 -->
    <!-- 无需比较快慢两个指针，一直滑动快指针，只需要比较快指针元素与前一个元素是否相同， -->
    <!-- 结果相同，不用管，继续滑动快指针-->
    <!-- 结果不同，将快指针指向的元素即不相同的元素复制到慢指针处，慢指针处即是不相同元素，移动慢指针 -->
    <!-- 最后慢指针前都是不重复的元素，直接返回慢指针下标即可 -->
 */

var removeDuplicates = function(nums) {
  if(nums.length < 2) return nums.length
  let slow = 0
  for(let fast = 1; fast < nums.length; fast++) {
    if(nums[slow] != nums[fast]) {
      slow++
      nums[slow] = nums[fast]
    }
  }
  return slow + 1
}